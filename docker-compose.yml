version: '3.8'  # docker compose 파일의 버전을 지정함
services:       # 애플리케이션을 구성하는 여러 컨테이너 서비스를 정의함
  db:
    image: mysql:8.0.37  # my sql 8.0.37 이미지를 사용
    environment:     # mysql 설정을 위한 환경 변수를 정의함
      MYSQL_ROOT_PASSWORD: mysql  # 루트 사용자 비밀번호를 설정함
      MYSQL_DATABASE: bookfriends # 생성할 데이터베이스 이름을 지정함
    ports:
      - "3307:3306"  # 호스트와 컨테이너 간의 포트를 매핑함. 호스트의 3307 포트를 컨테이너의 3306 포트에 매핑함
    volumes:  # 데이터베이스 데이터를 유지하기 위해 볼륨을 사용함.
      - db-data:/var/lib/mysql  # `db-data` 볼륨을 `/var/lib/mysql`에 매핑함

  redis:
    image: redis:6.2  # redis 6.2 이미지를 사용함
    ports:
      - "6379:6379"   # 호스트의 6379 포트를 컨테이너의 6379 포트에 매핑함
    volumes:              # 레디스 데이터를 유지하기 위해 볼륨을 사용함
      - redis-data:/data  # `redis-data`볼륨을 `/data`에 매핑함

  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:   # db 및 redis 서비스가 먼저 실행되도록 설정함
      - db
      - redis
    ports:
      - "61084:8001"  # 호스트의 61084 포트를 컨테이너의 8001 포트에 매핑함
    environment:  # 스프링부트 애플리케이션의 환경 변수를 설정함
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/bookfriends # DB 연결 URL을 설정함
      SPRING_DATASOURCE_USERNAME: root   # DB 사용자 이름을 설정함
      SPRING_DATASOURCE_PASSWORD: mysql  # DB 사용자 비번을 설정함
      SPRING_REDIS_HOST: redis           # Redis 호스트를 설정함
      SPRING_REDIS_PORT: 6379            # redis 포트를 설정함
      SERVER_PORT: 8001                  # 스프링부트 애플리케이션이 사용할 포트를 설정함
      FILE_UPLOAD_DIR: /BookFriends/uploads  # 환경 변수 추가
    volumes:
        - ./uploads:/BookFriends/uploads  # 호스트 디렉토리를 컨테이너로 마운트

volumes:
  db-data:    # mysql 데이터베이스 데이터를 저장할 볼륨을 정의함
  redis-data: # redis 데이터를 저장할 볼륨을 정의함


# Docker Compose를 사용하여 여러 Docker 컨테이너를 정의하고,
# 이들을 하나의 애플리케이션으로 구성하기 위한 설정 파일이다.
# 이 파일을 통해 여러 컨테이너 간의 네트워크, 볼륨, 환경 변수를 쉽게 관리할 수 있다.